import base64
import rsa
from random import randint
import os
from cryptography.fernet import Fernet

key = b"ZMsP-os-NcyCaxBeT7ACqdHb2VenfU1CE9haXT8hZcU="
f = Fernet(key)
privateKey=rsa.PrivateKey.load_pkcs1(base64.b64decode("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKTlFJQkFBS0NBZ0VBaVZrZHpjMDNNUDZKblNBeVRnWDJQRHZIODlKL21qZzZ1SFhxUlNXMWhweVl1eHJKCnhFUHVDdHd0SDhjZmtDUVp6Z1FZT0Y4VlZCMHlGdTF5akFoM20rcUQ2ZWJZeUY3UE1TcnI2YzR6ZERqN3FJRE4KamJQT2RpYmlwc1AyQldvc2FpcVprczN4K3lzZTM1bmFBZlBqbmhoZWN3cWw5SGhYY0lWWElFL0ZUbkY5S3FaagpSalM2ZHZVdXJSU3p3MHBjbWFRZEJ0K25nQlpOTFZTQWJ1T0ZMOWs3bTZ5WGdkMW1aNFBFVzdoQ1JXMTdLbUZFCjZIL05CQkJvOVZ2ZExGRmFPbUxRUm0xMGxnZUpiZ0pNL3JIczJiVG9CbFhOdFN4MXpEbnJwcHdkRENzUVBVbEMKTDBjK1dXakpJdHpBRkxBQlVmL2l2RjlGV3FaMERGdGxXaGpFR2UzaG1KdVFwNm9ZN0t5Vy9HdGtHR2hPWUlPeApXTk9LcUxISTI1Ukw4NVhad0lyWU45dGNzNkNLdndhWlM3YjhBTk1PYXpuM09aM0trQ0dYeFBtbUd0VjJ5VittCjNXQWhJc1p3ajNNV1FCOTV5dmtZeGcxcDVjdUlVV0ZyWFR6WnZhNUlXNThFRHA0QThvMUcvS0ZXZlN0ejVDMUIKTlI4Rm5qVnZqOFQranVXUHdOS3VMZzZXTzR5ZGFVSkZaaTZpdVJ1K05EZ0tVZW5talRrZkN0MDhDRldNd2lmNAp3bFphNjFObXh3OCtuZEJnRGRqRlFaNjE2VU40UEFVSFBvUVVpREs3RHVPZUQwd2xjYmp0Q3cxTHFKR25jcnd6CnNTK3NWQVlFR0I3OU1LbUFJMkxaWEZzY1pvdnczOFBUWXQ0Y1k0dzlTMGlaTEMvcHNHcmVvT2lnWWNrQ0F3RUEKQVFLQ0FnQkk5WExVaU1kaG1rU0ZsNzNCSG4rZm5XM293ZytRWDRBcHpsRkVxL1JTYmtyZlVTcU92RHJ0dittawpjTVQrYjM3WnBla3J3SzUyd1ErRGlGeUpzRkhCSEFFNHRhekFPMFM2Ykg5bThtYjR2UEJKb1NvUHRNemVqR2RuCmlMN2VQM2thYUVpdDZBSTdscnRPc2M1UnJUbGpHTFRMVFlPOGFsU2dhK1JOUUxLaHFiMkFjMlJXdmRtektTakQKUGpVRGJ6UGpWWDhwMEpLTWdzdzZZU0hjUmJYUkpnYjQrZVI5VXB0OEwwMldIem5zNFd4RXBlalJ6Rm1lYUEwcApFTVJiTDFmTG5nUGU5WE94NG8wSlIrV1lnZkU3OEZJMFUwM3ppSXVHa2RudzVncTBGUWdLVmlqM0xsUWJjSU12CnBxM09EM1JITGxHd3RjYklmUnM1Q1RkTmc1NUI2c1REWER6R04yQTlpYlhKMGRCbEhMQlRPMFBzSlZmOWIxWmYKWmRiZkxNMk01a0I1VzhtZnh3c1pGUDBaYjVTNU1QYWJMbjN4Qzh4czhsS24rODlCSW04RGxVM0ljSnJsUlAvOQo2K0pObXd0RzNFV01KYnNXNHl4RkkwM2RSdDllZ0FtNXB6S3cwclhxMkJsNVpaMVJLZUpVbzNza0JXVnJ2S1EwClliZVlFdlhETnRkV0hEZjJGei9pMTlvTkw1b2hSY1dYVFR5clVtMHpwd2d6Q2lJMkNHSnk0R013OXUwOWNINVYKbjJqdm44S3l4RGlhSW8yUDYzc2dqTUk5QmJ0YUs3SE5sWUxoTEVqNzh2ZmViRFhEOVZmaWswVWdCQTlqL0Z3bApWUHNnTE1IVWNBaWhkSy9TdUVKTTZWbEUzYWgwWDA2c0N1eEM5bGtQK2JoVW54aTRSUUtDQVJFQWtNbU85TkoyCkJvVE9NN21PVWhpOUFFdGlZTnBWalFrNktjNElEUG11WEJBNHlRdE4yN2xkRHRrWnFza1pBakszQUNVN2FCU1oKdGVQek1vWkpRc2Vldzh6WlJ6V3llWC9zVnczMWJ6Q3R2MXVJcjRJODhvZ1oycVdOYk9jRGhuUzdWblZwL05WNgpJVE9EZnk2K25DTE02STByTWZJNDVJOExXVThYSy9HOXcyRDlJSFJJK1IvT1NuR2tCeDdVOWJYRlNMSnBKNnFTCll3VmZ5YU5zeHBmZkcvZWlUQldrZVpvSHd0TkxtL2t6RTk0OVg0UDJldFdScEhWWjRpQ2xRR0lnc3pPbzh5N3cKOGl1N1RiaFFjUjJNRm9uS3pmQVU4L1BQS0V6b0xQenhNMzdKVTU1WVhaa0JBYzM4MU1XNFNGd1V4UndpckFmRQpRcEcwenU3Y3BVSXJQMUk3VUtRbEhmNWxRdzk5VnlmMFVOY0NnZkVBOHRpOGUwb0htLzZVcEtQaUMyajFjY282CjZGZlNycFN4ZlM5eXpZTmYxK1BzWEhzekx2Y1lDbUlQWFZkemJKeERlY3Y1TndTT2RCWVBDY2RQOFBuaUdGNDAKKzFkTGZPNFN5djlsYWhyRjcyaDhFWkdIc3h4UHlIVlNFWWx2dllDcXRTSTdhTFFlK1JRR0NWY2xONzJvQmVaSgpGN1pzZ0NJM2h6UGtmaDluYVlFSlVpa3hWVW0zMXErM251MlpCdFFiSDBUYVA1VmVoRjhDMld6OVlDc3A4ZkpNClgwMWNvVmt1aHNIQXB1OVlSMnlrK2FDaU95V0RpNlprdjJjVy9nT29vYmhLV3YxbFhFcTkrdWxOb2VndG95RUYKbm9rNWFkMzB4VkduL3RJVzRrOGk3cEFrdjdsOWozaEpOUVJlVm01ZkFvSUJFR2wzQ0hUNUlSUGFoVUZVTm9GQwpsOW14RDdZeEZBUXA1bjR4SDlnanY0ZzhJTUVCUlBONmNIaXlWMm42RmdkdDNiTnphM1NESFB4TFVRbEttKzdTCjdhaitmSDdNZEhiZ1ljMS8wM25zNFlMMEwvcDRTZUQ0bHF5WHp3NjJyL0N1OHc4bGM5REJ4N2FMaVl1SkJ6dEEKZGpZbkxvR3hTUlBqeG9hRmdBRjRrNXZQK0ZJOW9qSWxvdVRESnBJeE9Ucko3eXpuR0lYV1Q4OWxTTUxlRWd3Two4R3UwMURuTHdnVDUyQkZvVERrUEtzK2NJT1NFZ1hRMFFXU2tQcGJpNUx5alBlS0xETlFuSzBlYjUxSFRvblRpCjZ2bzM0TXhseHoxMEtUL1gxWDkvdUVxa1hnNVUxMVZHY0Y5YUpvTHVpeS9hTXg3cFFiQkI4QW4xak5qM1VTM24KcHd6MjMxSDhYelViNjdNUGcyT0xMUUg5QW9IeEFPaU5ndGt4eUYyckNsOHJqU0RPRHhVN3l2T0tmbmV1YnRWcApwYStHV2piY3poQzE3Z3JRbHRZQ2w2SVVSN1UvWXlKMG9SLzluZ2t1d3BIanF2c2g0RkRqamlzT3FueGxZOXUvCmZUZUJrZ0MwZHZOQUFNb1ZsNVZvUEFJTk1kTXdMc2tza2VXdmIyV290aXNscDc5Y1FGWDk5QXJnSjhFQWcxcFcKNkQyYkJ5V3lhdUdpRHRzVXNCYkh5TGhKNFZ2M3JFMWlXdm0rcVhkcm9NZmpwalA4d2JzdkE5SFR2SnZLVWxLNwpvaWg2VlhoNFl2ZWx5eFdHMUJUY2IrZ1c2WjZ3bEVEaHdWcW5BL1RBb25Od0RXYTVkMUtiSWMxeXJXZGpKSzM4Cmh6cnZwdmhyUGhGa09iemIvWkJ4YVBGN1VIZkdVd0tDQVE4cGI1NFQ3TEtrL3VWc0Rid0ozRXRWRTdpTWxwdjcKanN1WnRLTFRMUUpySmRobk1OQmRjdWZEVjNOZlJheDZyR2NEOXB2ZGFkL3VQcEUwUkJ0UFAxNmF4V0xnQVZ1cQpyVjNJem5UOGhCNEx5eHZ4WThqRFdWSW42OWYxT0RtK29icmRRcE5Fbmp1TEI3VUJLMTV0MzEzaWJDcnp5Mk81CmEzKzhnc0VHaFd0ajg4dkxGUWtjQWJqZHdTemdUL0FWc2RxNU1xU1k5SFJUQ09XdzRyNCtZY1dTQmczYy92VEcKN2RhelFoOVM4RjV1ZnV4SlRlaThOdldZSXJlelI4OTRkQ09nUmxvMzc1UDFTeHJQWEgvZFA4VFpZNzd4aHpRRAp3eThaMVA2NHZZOTFXeDlYTTNHVnZQVUsvUlpRVHFZVk1TTjg5Z3pVeDJPMktMQVBFaHNJTWJ0MFUxTnZVeUpJCnAzSnFadXQrREl2TgotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="))

def EncryptCommand(command):
    commandBytes = command.encode('utf-8')
    randomFile = randint(1, 10000000000)
    base85d = base64.b85encode(commandBytes)
    token = f.encrypt(base85d)
    safe = rsa.encrypt(token, privateKey)
    # os.system(f'touch {randomFile}.txt')
    open(f"{os.getcwd()}/commands/{randomFile}.txt", 'wb').write(base64.b85encode(safe))

EncryptCommand("echo Hi > test.txt")